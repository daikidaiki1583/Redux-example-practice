{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\daiki\\\\redux\\\\examples\\\\todomvc\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\daiki\\\\redux\\\\examples\\\\todomvc\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { ADD_TODO, DELETE_TODO, EDIT_TODO, COMPLETE_TODO, COMPLETE_ALL_TODOS, CLEAR_COMPLETED } from '../constants/ActionTypes'; // const initialState = [\n//   {\n//     text: 'Use Redux',\n//     completed: false,\n//     id: 0\n//   }\n// ]\n\nexport default function todos(state, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [].concat(_toConsumableArray(state), [{\n        id: state.reduce(function (maxId, todo) {\n          return Math.max(todo.id, maxId);\n        }, -1) + 1,\n        completed: false,\n        text: action.text\n      }]);\n\n    case DELETE_TODO:\n      return state.filter(function (todo) {\n        return todo.id !== action.id;\n      });\n\n    case EDIT_TODO:\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          text: action.text\n        }) : todo;\n      });\n\n    case COMPLETE_TODO:\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          completed: !todo.completed\n        }) : todo;\n      });\n\n    case COMPLETE_ALL_TODOS:\n      var areAllMarked = state.every(function (todo) {\n        return todo.completed;\n      });\n      return state.map(function (todo) {\n        return _objectSpread({}, todo, {\n          completed: !areAllMarked\n        });\n      });\n\n    case CLEAR_COMPLETED:\n      return state.filter(function (todo) {\n        return todo.completed === false;\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\daiki\\redux\\examples\\todomvc\\src\\reducers\\todos.js"],"names":["ADD_TODO","DELETE_TODO","EDIT_TODO","COMPLETE_TODO","COMPLETE_ALL_TODOS","CLEAR_COMPLETED","todos","state","action","type","id","reduce","maxId","todo","Math","max","completed","text","filter","map","areAllMarked","every"],"mappings":";;AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,aAJF,EAKEC,kBALF,EAMEC,eANF,QAOO,0BAPP,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAuBC,MAAvB,EAA+B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,QAAL;AACE,0CACKO,KADL,IAEE;AACEG,QAAAA,EAAE,EAAEH,KAAK,CAACI,MAAN,CAAa,UAACC,KAAD,EAAQC,IAAR;AAAA,iBAAiBC,IAAI,CAACC,GAAL,CAASF,IAAI,CAACH,EAAd,EAAkBE,KAAlB,CAAjB;AAAA,SAAb,EAAwD,CAAC,CAAzD,IAA8D,CADpE;AAEEI,QAAAA,SAAS,EAAE,KAFb;AAGEC,QAAAA,IAAI,EAAET,MAAM,CAACS;AAHf,OAFF;;AASF,SAAKhB,WAAL;AACE,aAAOM,KAAK,CAACW,MAAN,CAAa,UAAAL,IAAI;AAAA,eACtBA,IAAI,CAACH,EAAL,KAAYF,MAAM,CAACE,EADG;AAAA,OAAjB,CAAP;;AAIF,SAAKR,SAAL;AACE,aAAOK,KAAK,CAACY,GAAN,CAAU,UAAAN,IAAI;AAAA,eACnBA,IAAI,CAACH,EAAL,KAAYF,MAAM,CAACE,EAAnB,qBACOG,IADP;AACaI,UAAAA,IAAI,EAAET,MAAM,CAACS;AAD1B,aAEEJ,IAHiB;AAAA,OAAd,CAAP;;AAMF,SAAKV,aAAL;AACE,aAAOI,KAAK,CAACY,GAAN,CAAU,UAAAN,IAAI;AAAA,eACnBA,IAAI,CAACH,EAAL,KAAYF,MAAM,CAACE,EAAnB,qBACOG,IADP;AACaG,UAAAA,SAAS,EAAE,CAACH,IAAI,CAACG;AAD9B,aAEEH,IAHiB;AAAA,OAAd,CAAP;;AAMF,SAAKT,kBAAL;AACE,UAAMgB,YAAY,GAAGb,KAAK,CAACc,KAAN,CAAY,UAAAR,IAAI;AAAA,eAAIA,IAAI,CAACG,SAAT;AAAA,OAAhB,CAArB;AACA,aAAOT,KAAK,CAACY,GAAN,CAAU,UAAAN,IAAI;AAAA,iCAChBA,IADgB;AAEnBG,UAAAA,SAAS,EAAE,CAACI;AAFO;AAAA,OAAd,CAAP;;AAKF,SAAKf,eAAL;AACE,aAAOE,KAAK,CAACW,MAAN,CAAa,UAAAL,IAAI;AAAA,eAAIA,IAAI,CAACG,SAAL,KAAmB,KAAvB;AAAA,OAAjB,CAAP;;AAEF;AACE,aAAOT,KAAP;AAzCJ;AA2CD","sourcesContent":["import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED\n} from '../constants/ActionTypes'\n\n// const initialState = [\n//   {\n//     text: 'Use Redux',\n//     completed: false,\n//     id: 0\n//   }\n// ]\n\nexport default function todos(state , action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text\n        }\n      ]\n\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.id\n      )\n\n    case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, text: action.text } :\n          todo\n      )\n\n    case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, completed: !todo.completed } :\n          todo\n      )\n\n    case COMPLETE_ALL_TODOS:\n      const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked\n      }))\n\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false)\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}